<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lumbra Knowledge Graph Animation</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: #0a0a0a;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        
        #canvas {
            max-width: 100%;
            max-height: 100%;
        }
        
        .content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            opacity: 0;
            transition: opacity 1.5s ease-in-out;
            z-index: 10;
        }
        
        .content.show {
            opacity: 1;
        }
        
        h1 {
            color: white;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            font-size: 3rem;
            margin: 20px 0;
            letter-spacing: 0.1em;
        }
    </style>
</head>
<body>
    <canvas id="canvas"></canvas>
    <div class="content" id="content">
        <h1>LUMBRA</h1>
    </div>
    
    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const content = document.getElementById('content');
        
        // Professional color scheme - green/teal gradient
        const colors = {
            primary: '#10b981',    // Emerald green
            secondary: '#14b8a6',  // Teal
            accent: '#22d3ee',     // Cyan
            dim: '#059669',        // Darker green
            bright: '#34d399'      // Bright green
        };
        
        // Set canvas size and center point
        let centerX, centerY;
        function setCanvasSize() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            centerX = canvas.width / 2;
            centerY = canvas.height / 2;
        }
        setCanvasSize();
        window.addEventListener('resize', () => {
            setCanvasSize();
        });
        
        // Chaos to order easing
        function chaosToOrderEase(t) {
            if (t < 0.4) {
                return t * 0.25; // Maintain chaos longer
            } else if (t < 0.8) {
                const localT = (t - 0.4) / 0.4;
                return 0.1 + localT * localT * 0.7;
            } else {
                return 1 - Math.pow(1 - t, 3);
            }
        }
        
        // Particle class - data packets
        class Particle {
            constructor(x, y, targetX, targetY, delay, isLogo = false, color = colors.primary, size = null) {
                this.x = x;
                this.y = y;
                this.startX = x;
                this.startY = y;
                this.targetX = targetX;
                this.targetY = targetY;
                this.delay = delay;
                this.radius = size || (isLogo ? 8 : Math.random() * 2.5 + 0.5);
                this.opacity = 0;
                this.appearing = false;
                this.isLogo = isLogo;
                this.color = color;
                
                // Data packet movement
                this.speed = (Math.random() + 0.5) * 5;
                this.angle = Math.random() * Math.PI * 2;
                this.vx = Math.cos(this.angle) * this.speed;
                this.vy = Math.sin(this.angle) * this.speed;
                
                // Final state micro-movement
                this.floatPhase = Math.random() * Math.PI * 2;
                this.floatRadius = Math.random() * 2 + 1;
                
                this.moveStartTime = null;
                this.moveDuration = isLogo ? 3000 : 4000 + Math.random() * 2000;
            }
            
            update(time) {
                if (time > this.delay && !this.appearing) {
                    this.appearing = true;
                    this.moveStartTime = time;
                }
                
                if (this.appearing && this.opacity < 1) {
                    this.opacity += 0.02;
                }
                
                if (this.appearing && this.moveStartTime !== null) {
                    const elapsed = time - this.moveStartTime;
                    const progress = Math.min(elapsed / this.moveDuration, 1);
                    const easedProgress = chaosToOrderEase(progress);
                    const chaosLevel = 1 - easedProgress;
                    
                    // Data packet bouncing
                    if (chaosLevel > 0.5) {
                        // Bounce off edges
                        if (this.x < 50 || this.x > canvas.width - 50) this.vx *= -0.9;
                        if (this.y < 50 || this.y > canvas.height - 50) this.vy *= -0.9;
                        
                        // Random direction changes
                        if (Math.random() < 0.02) {
                            this.angle += (Math.random() - 0.5) * Math.PI;
                            this.vx = Math.cos(this.angle) * this.speed * chaosLevel;
                            this.vy = Math.sin(this.angle) * this.speed * chaosLevel;
                        }
                        
                        this.x += this.vx;
                        this.y += this.vy;
                    } else {
                        // Smooth transition to target
                        const baseX = this.x + (this.targetX - this.x) * 0.08;
                        const baseY = this.y + (this.targetY - this.y) * 0.08;
                        
                        // Add subtle floating motion in final state
                        const floatX = Math.cos(time * 0.001 + this.floatPhase) * this.floatRadius * easedProgress;
                        const floatY = Math.sin(time * 0.001 + this.floatPhase) * this.floatRadius * easedProgress;
                        
                        this.x = baseX + floatX;
                        this.y = baseY + floatY;
                    }
                }
            }
            
            draw() {
                ctx.save();
                ctx.globalAlpha = this.opacity;
                ctx.fillStyle = this.color;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fill();
                
                if (this.isLogo) {
                    ctx.shadowBlur = 20;
                    ctx.shadowColor = this.color;
                    ctx.fill();
                }
                ctx.restore();
            }
        }
        
        // L shape configuration
        const logoConfig = [
            { x: -30, y: -30, color: colors.primary },
            { x: -30, y: -10, color: colors.secondary },
            { x: -30, y: 10, color: colors.primary },
            { x: -30, y: 30, color: colors.secondary },
            { x: -10, y: 30, color: colors.accent },
            { x: 10, y: 30, color: colors.primary }
        ];
        
        // Create particles
        const particles = [];
        
        // Create logo particles
        logoConfig.forEach((config, i) => {
            // Start from edges
            const edge = Math.floor(Math.random() * 4);
            let startX, startY;
            switch(edge) {
                case 0: startX = 0; startY = Math.random() * canvas.height; break;
                case 1: startX = canvas.width; startY = Math.random() * canvas.height; break;
                case 2: startX = Math.random() * canvas.width; startY = 0; break;
                case 3: startX = Math.random() * canvas.width; startY = canvas.height; break;
            }
            
            particles.push(new Particle(
                startX,
                startY,
                centerX + config.x,
                centerY + config.y,
                6000 + i * 200,
                true,
                config.color
            ));
        });
        
        // Create multiple layers of particles for depth
        // Inner dense core
        for (let i = 0; i < 40; i++) {
            const angle = Math.random() * Math.PI * 2;
            const radius = Math.random() * 80 + 20;
            const targetX = centerX + Math.cos(angle) * radius;
            const targetY = centerY + Math.sin(angle) * radius;
            
            const startX = Math.random() * canvas.width;
            const startY = Math.random() * canvas.height;
            
            particles.push(new Particle(
                startX, startY, targetX, targetY,
                Math.random() * 3000,
                false,
                colors.bright,
                Math.random() * 2 + 1
            ));
        }
        
        // Middle layer - medium density
        for (let i = 0; i < 80; i++) {
            const angle = Math.random() * Math.PI * 2;
            const radius = 80 + Math.random() * 100 + Math.sin(angle * 4) * 30;
            const targetX = centerX + Math.cos(angle) * radius;
            const targetY = centerY + Math.sin(angle) * radius;
            
            const startX = Math.random() * canvas.width;
            const startY = Math.random() * canvas.height;
            
            const colorChoice = Math.random();
            let color;
            if (colorChoice < 0.3) color = colors.primary;
            else if (colorChoice < 0.6) color = colors.secondary;
            else if (colorChoice < 0.8) color = colors.accent;
            else color = colors.dim;
            
            particles.push(new Particle(
                startX, startY, targetX, targetY,
                Math.random() * 4000,
                false,
                color
            ));
        }
        
        // Outer layer - sparse
        for (let i = 0; i < 60; i++) {
            const angle = Math.random() * Math.PI * 2;
            const radius = 180 + Math.random() * 120 + Math.sin(angle * 3) * 40;
            const targetX = centerX + Math.cos(angle) * radius;
            const targetY = centerY + Math.sin(angle) * radius;
            
            const startX = Math.random() * canvas.width;
            const startY = Math.random() * canvas.height;
            
            particles.push(new Particle(
                startX, startY, targetX, targetY,
                Math.random() * 5000,
                false,
                colors.dim,
                Math.random() * 1.5 + 0.5
            ));
        }
        
        // Animation start
        let animationStart = Date.now();
        
        // Draw connections with varying strengths
        function drawConnections(currentTime) {
            const progress = Math.min(currentTime / 10000, 1);
            const orderLevel = chaosToOrderEase(progress);
            
            // Create connection map to avoid duplicates
            const connections = new Map();
            
            particles.forEach((particle, i) => {
                let connectionsDrawn = 0;
                const maxConnections = particle.isLogo ? 4 : 3;
                
                particles.forEach((otherParticle, j) => {
                    if (i !== j && connectionsDrawn < maxConnections) {
                        const dx = particle.x - otherParticle.x;
                        const dy = particle.y - otherParticle.y;
                        const distance = Math.sqrt(dx * dx + dy * dy);
                        
                        const maxDistance = particle.isLogo ? 150 : 100 + orderLevel * 50;
                        
                        if (distance < maxDistance && particle.opacity > 0.3 && otherParticle.opacity > 0.3) {
                            const key = i < j ? `${i}-${j}` : `${j}-${i}`;
                            
                            if (!connections.has(key)) {
                                connections.set(key, {
                                    from: particle,
                                    to: otherParticle,
                                    distance: distance,
                                    maxDistance: maxDistance
                                });
                                connectionsDrawn++;
                            }
                        }
                    }
                });
            });
            
            // Draw all connections
            connections.forEach(({ from, to, distance, maxDistance }) => {
                ctx.save();
                
                const connectionStrength = 1 - (distance / maxDistance);
                const connectionOpacity = Math.min(from.opacity, to.opacity) * 0.1 * connectionStrength * orderLevel;
                ctx.globalAlpha = connectionOpacity;
                
                // Gradient line for beauty
                const gradient = ctx.createLinearGradient(from.x, from.y, to.x, to.y);
                gradient.addColorStop(0, from.color);
                gradient.addColorStop(1, to.color);
                
                ctx.strokeStyle = gradient;
                ctx.lineWidth = (from.isLogo && to.isLogo ? 2.5 : 1) * connectionStrength;
                ctx.beginPath();
                ctx.moveTo(from.x, from.y);
                ctx.lineTo(to.x, to.y);
                ctx.stroke();
                ctx.restore();
            });
        }
        
        // Draw L connections
        function drawLogoConnections() {
            const logoParticles = particles.filter(p => p.isLogo);
            if (logoParticles.every(p => p.opacity > 0.7)) {
                ctx.save();
                ctx.globalAlpha = 0.9;
                ctx.strokeStyle = colors.primary;
                ctx.lineWidth = 3;
                ctx.shadowBlur = 20;
                ctx.shadowColor = colors.primary;
                ctx.lineCap = 'round';
                ctx.lineJoin = 'round';
                
                ctx.beginPath();
                // Vertical line
                ctx.moveTo(logoParticles[0].x, logoParticles[0].y);
                ctx.lineTo(logoParticles[1].x, logoParticles[1].y);
                ctx.lineTo(logoParticles[2].x, logoParticles[2].y);
                ctx.lineTo(logoParticles[3].x, logoParticles[3].y);
                // Horizontal line
                ctx.lineTo(logoParticles[4].x, logoParticles[4].y);
                ctx.lineTo(logoParticles[5].x, logoParticles[5].y);
                ctx.stroke();
                ctx.restore();
            }
        }
        
        // Animation loop
        function animate() {
            const currentTime = Date.now() - animationStart;
            const progress = Math.min(currentTime / 10000, 1);
            
            // Clear canvas
            const fadeOpacity = progress < 0.4 ? 0.03 : 0.08;
            ctx.fillStyle = `rgba(10, 10, 10, ${fadeOpacity})`;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Update and draw
            particles.forEach(particle => {
                particle.update(currentTime);
                particle.draw();
            });
            
            // Connections after 3 seconds
            if (currentTime > 3000) {
                drawConnections(currentTime);
            }
            
            // Logo connections after 8 seconds
            if (currentTime > 8000) {
                drawLogoConnections();
            }
            
            // Show text after 10 seconds
            if (currentTime > 10000 && !content.classList.contains('show')) {
                content.classList.add('show');
            }
            
            requestAnimationFrame(animate);
        }
        
        // Start
        animate();
    </script>
</body>
</html>
